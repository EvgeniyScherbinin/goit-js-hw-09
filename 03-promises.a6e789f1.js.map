{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SASA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EACEG,EAAAZ,GAASa,OAAOC,QACd,uBAAwCC,OAAfZ,EAAS,QAAYY,OAANX,EAAM,QAIlDM,EACEE,EAAAZ,GAASa,OAAOG,QACd,sBAAuCD,OAAfZ,EAAS,QAAYY,OAANX,EAAM,O,GAIlDA,E,KAxBM,CACXa,UAAWC,SAASC,cAAc,WAE9BF,UAEIG,iBAAiB,UAuB3B,SAA6BC,GAC3BA,EAAIC,iBAMJ,IAJA,IAAIC,EAAOC,OAAOH,EAAII,cAAcF,KAAKG,OACrCtB,EAAQoB,OAAOH,EAAII,cAAcrB,MAAMsB,OACvCC,EAASH,OAAOH,EAAII,cAAcE,OAAOD,OAEpCE,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAChC1B,EAAc0B,EAAGxB,GACdyB,MAAK,SAAAf,G,OAAWgB,QAAQC,IAAI,sB,IAC1BC,OAAI,SAAAC,G,OAASH,QAAQC,IAAI,qB,IAC9B3B,GAASmB,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  inputData: document.querySelector('.form'),\n};\nlet { inputData } = refs;\n\ninputData.addEventListener('submit', startCreatePromises);\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          )\n        );\n      } else {\n        reject(\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          )\n        );\n      }\n    }, delay);\n  });\n};\n\nfunction startCreatePromises(evt) {\n  evt.preventDefault();\n\n  let step = Number(evt.currentTarget.step.value);\n  let delay = Number(evt.currentTarget.delay.value);\n  let amount = Number(evt.currentTarget.amount.value);\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(success => console.log('✅ Fulfilled promise'))\n      .catch(error => console.log('❌ Rejected promise'));\n    delay += step;\n  }\n};\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$parcel$interopDefault","Notify","success","concat","failure","inputData","document","querySelector","addEventListener","evt","preventDefault","step","Number","currentTarget","value","amount","i","then","console","log","catch","error"],"version":3,"file":"03-promises.a6e789f1.js.map"}